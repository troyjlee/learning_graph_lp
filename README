OVERVIEW: These are programs to accompany the paper "Improved quantum 
query algorithms for triangle finding and associativity testing" by Lee, 
Magniez, and Santha.  In that paper a family of algorithms is given for 
detecting a subgraph H in a graph.  The algorithm depends on a bunch of 
parameters.  The programs given here use linear programming to optimize 
the cost of the algorithm over these parameters, and return the best cost 
and an optimal set of parameters.

PREREQS: The programs are written in Python.  To solve the linear programs 
the package PyMathProg is used, which is available at 

http://pymprog.sourceforge.net/

CONTENTS: Three programs are included.

lg_algo.py 
To use this program, the user can modify two variables, 
"graph" and "schedule" found at the beginning of main.  The graph 
variable encodes the subgraph H as a dictionary.  For example, triangle 
can be encoded as
triangle = {(1,2):1, (1,3):2, (2,3):3}

The variable schedule is a list giving the order in which the vertices 
and edges are loaded.  In the case of triangle a possible schedule is
schedule = [1, 2, 3, (1,2), (2,3), (1,3)]

The program sets up and solves a linear program to optimize the set size 
and degree parameters of the algorithm for the given graph and schedule.  
Here is sample output in the case of triangle:

The objective value is 1.2857 = 9 / 7

Set size parameters are
set 1 = 0.5714 = 4 / 7
set 2 = 0.7143 = 5 / 7
set 3 = 0.4286 = 3 / 7

Degree parameters are
degree from 1 to 2 = 0.7143 = 5 / 7
degree from 1 to 3 = 0.0000 = 0 / 1
degree from 2 to 3 = 0.1429 = 1 / 7

search_sched.py
This program depends on lg_algo.  In this program the user only needs 
to set the graph variable, again found at the beginning of main.  This 
program then searches over all valid loading schedules and uses lg_algo to
determine the complexity of the algorithm with that loading schedule.  
It returns a best loading schedule and optimal set of parameters.

fast_search.py
For larger subgraphs, searching over all schedules can take a while.  
The program fast_search.py uses a more limited search space where first 
all vertices are loaded and then all edges.  In all cases I have seen 
there is an optimal schedule of this form, though I don't know if  
this is true in general.

MORE DETAILS: As described in the paper, each stage of the loading 
schedule incurs a cost, dependent on the parameters of the algorithm.  
We want to minimize the overall complexity, which is the maximum of these
costs.  If we write each parameter of the algorithm in the form n^c 
and take the logarithm of the cost of each stage, each cost becomes a 
linear function of the exponents of the parameters.  Thus we can use 
linear programming to find a setting of the exponents to minimize the 
overall cost.  What the algorithm returns is the exponents of the cost 
and parameters.

KNOWN ISSUES: The program does not enforce the third condition in the 
definition of admissible parameters.  Thus it should always be checked 
when the program returns that the parameters actually are admissible.
